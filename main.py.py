import streamlit as st
import datetime
import os

NOTE = (
    "üí° Sao r·∫•t nhi·ªÅu l·ªánh trade: N√™n chia nh·ªè l·ªánh, tr√°nh d·ªìn m·ªôt c·ª•c ƒë·ªÉ b·ªã qu√©t m·ªôt l·∫ßn!\n"
    "üí° SL th√¨ gi·ªØ nguy√™n, kh√¥ng c·∫ßn di chuy·ªÉn n·∫øu gi√° ch∆∞a ch·∫°y 1500 gi√°."
)
WORKFLOW = {
    "step_1": {
        "question": "Gi√° c√≥ tr√™n VWAP kh√¥ng?",
        "options": ["Tr√™n", "D∆∞·ªõi"]
    },
    "step_2": {
        "question": "Big trader v√†o l·ªánh ph√∫t th·ª© m·∫•y? (Nh·∫≠p s·ªë ph√∫t 0-59)",
        "options": "input_minute"
    },
    "step_3": {
        "question": "M·∫∑t c∆∞·ªùi m√†u g√¨? (Xanh/ƒê·ªè)",
        "options": ["Xanh", "ƒê·ªè"]
    },
    "should_trade": {
        "question": "‚úÖ N√™n v√†o l·ªánh!\n\n" + NOTE,
        "options": ["K·∫øt qu·∫£ giao d·ªãch: Th·∫Øng", "K·∫øt qu·∫£ giao d·ªãch: Thua"]
    },
    "end_no_trade": {
        "question": "‚ùå V√ÄO L√Ä M·∫§T TI·ªÄN NHA M·∫¶Y\n" * 3 + NOTE,
        "options": ["Quay l·∫°i menu"]
    },
    # Nh√°nh d∆∞·ªõi VWAP
    "step_2_below": {
        "question": "Big trader v√†o l·ªánh ph√∫t th·ª© m·∫•y? (Nh·∫≠p s·ªë ph√∫t 0-59)",
        "options": "input_minute_below"
    },
    "step_3_below": {
        "question": "M·∫∑t c∆∞·ªùi m√†u g√¨? (Xanh/ƒê·ªè)",
        "options": ["ƒê·ªè", "Xanh"]
    },
    "should_short": {
        "question": "üî¥ N√™n v√†o l·ªánh SHORT!\n\n" + NOTE,
        "options": ["K·∫øt qu·∫£ giao d·ªãch: Th·∫Øng", "K·∫øt qu·∫£ giao d·ªãch: Thua"]
    },
    "wait_short": {
        "question": "‚ùå V√†o l√† M·∫§T TI·ªÄN\n" * 3 + NOTE,
        "options": ["Quay l·∫°i menu"]
    },
    "reason_win": {
        "question": "B·∫°n th·∫Øng v√¨ l√Ω do g√¨? (Nh·∫≠p l√Ω do)",
        "options": "input_reason_win"
    },
    "reason_lose": {
        "question": "B·∫°n thua v√¨ l√Ω do g√¨? (Nh·∫≠p l√Ω do)",
        "options": "input_reason_lose"
    },
    "reason_win_short": {
        "question": "B·∫°n th·∫Øng (SHORT) v√¨ l√Ω do g√¨? (Nh·∫≠p l√Ω do)",
        "options": "input_reason_win_short"
    },
    "reason_lose_short": {
        "question": "B·∫°n thua (SHORT) v√¨ l√Ω do g√¨? (Nh·∫≠p l√Ω do)",
        "options": "input_reason_lose_short"
    },
    "menu": {
        "question": "Ch√†o m·ª´ng! Ch·ªçn m·ªôt ch·ª©c nƒÉng b√™n d∆∞·ªõi:",
        "options": ["V√†o", "L·ªãch s·ª≠ giao d·ªãch", "K·∫øt qu·∫£ th·∫Øng", "K·∫øt qu·∫£ thua"]
    },
    "history_menu": {
        "question": "Ch·ªçn lo·∫°i l·ªãch s·ª≠ mu·ªën xem:",
        "options": ["L·ªãch s·ª≠ h√¥m nay", "L·ªãch s·ª≠ tu·∫ßn n√†y", "T·∫•t c·∫£ l·ªãch s·ª≠", "Quay l·∫°i menu"]
    }
}

HISTORY_FILE = "history.txt"

def save_history(trade_type, result, reason):
    now = datetime.datetime.now().strftime("%d-%m-%Y")
    r_value = "2R"
    with open(HISTORY_FILE, "a", encoding="utf-8") as f:
        f.write(f"{now} | {trade_type} | {result} | {reason} | {r_value}\n")

def show_history(filter_func=None, title="L·ªãch s·ª≠"):
    results = []
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            for line in f:
                if filter_func is None or filter_func(line):
                    results.append(line.strip())
    st.subheader(title)
    if results:
        st.text("\n".join(results))
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu.")

def show_reasons(result_type, title):
    reasons = []
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split("|")
                if len(parts) >= 4 and parts[2].strip() == result_type:
                    reason = parts[3].strip()
                    if reason:
                        reasons.append(reason)
    st.subheader(title)
    if reasons:
        unique_reasons = sorted(set(reasons), key=lambda x: x.lower())
        for r in unique_reasons:
            st.markdown(f"- {'üèÜ' if result_type=='Th·∫Øng' else 'üí•'} **{r}**")
    else:
        st.info(f"Ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch {result_type.lower()} n√†o.")

def main():
    st.set_page_config(page_title="Trading Workflow Minimalist", layout="centered")
    st.markdown("""
        <style>
        .stButton>button {font-size: 18px !important; padding: 0.7em 2em; margin: 0.5em 0; border-radius: 10px;}
        .stTextInput>div>div>input {font-size: 18px !important; border-radius: 8px; padding: 0.7em;}
        .stMarkdown, .stSubheader {font-size: 20px !important;}
        </style>
    """, unsafe_allow_html=True)
    if "state" not in st.session_state:
        st.session_state.state = "menu"
        st.session_state.big_trader_minute = None
        st.session_state.last_branch = None
    state = st.session_state.state
    step_data = WORKFLOW[state]
    st.markdown(f"**{step_data['question']}**")
    options = step_data["options"]
    # Menu ch√≠nh
    if state == "menu":
        if st.button("V√†o"):
            st.session_state.state = "step_1"
            st.rerun()
        if st.button("L·ªãch s·ª≠ giao d·ªãch"):
            st.session_state.state = "history_menu"
            st.rerun()
        if st.button("K·∫øt qu·∫£ th·∫Øng"):
            show_reasons("Th·∫Øng", "C√°c l√Ω do th·∫Øng n·ªïi b·∫≠t")
        if st.button("K·∫øt qu·∫£ thua"):
            show_reasons("Thua", "C√°c l√Ω do thua n·ªïi b·∫≠t")
    # L·ªãch s·ª≠ menu
    elif state == "history_menu":
        if st.button("L·ªãch s·ª≠ h√¥m nay"):
            today = datetime.datetime.now().strftime("%d-%m-%Y")
            show_history(lambda line: line.startswith(today), "L·ªãch s·ª≠ h√¥m nay")
        if st.button("L·ªãch s·ª≠ tu·∫ßn n√†y"):
            today = datetime.datetime.now()
            start_week = today - datetime.timedelta(days=today.weekday())
            def in_week(line):
                try:
                    date_str = line.split("|")[0].strip()
                    date_obj = datetime.datetime.strptime(date_str, "%d-%m-%Y")
                    return start_week.date() <= date_obj.date() <= today.date()
                except:
                    return False
            show_history(in_week, "L·ªãch s·ª≠ tu·∫ßn n√†y")
        if st.button("T·∫•t c·∫£ l·ªãch s·ª≠"):
            show_history(None, "T·∫•t c·∫£ l·ªãch s·ª≠")
        if st.button("Quay l·∫°i menu"):
            st.session_state.state = "menu"
            st.rerun()
    # C√°c b∆∞·ªõc workflow
    elif state in ["step_1", "step_3", "step_3_below", "should_trade", "should_short", "end_no_trade", "wait_short"]:
        for opt in options:
            if st.button(opt):
                # X·ª≠ l√Ω chuy·ªÉn b∆∞·ªõc
                if state == "step_1":
                    if opt == "Tr√™n":
                        st.session_state.state = "step_2"
                    else:
                        st.session_state.state = "step_2_below"
                elif state == "step_3":
                    if opt == "Xanh":
                        st.session_state.state = "should_trade"
                    else:
                        st.session_state.state = "end_no_trade"
                elif state == "step_3_below":
                    if opt == "ƒê·ªè":
                        st.session_state.state = "should_short"
                    else:
                        st.session_state.state = "wait_short"
                elif state == "should_trade":
                    if opt == "K·∫øt qu·∫£ giao d·ªãch: Th·∫Øng":
                        st.session_state.state = "reason_win"
                    else:
                        st.session_state.state = "reason_lose"
                elif state == "should_short":
                    if opt == "K·∫øt qu·∫£ giao d·ªãch: Th·∫Øng":
                        st.session_state.state = "reason_win_short"
                    else:
                        st.session_state.state = "reason_lose_short"
                elif state in ["end_no_trade", "wait_short"]:
                    st.session_state.state = "menu"
                st.rerun()
    elif state == "step_2":
        minute = st.text_input("Nh·∫≠p s·ªë ph√∫t (0-59)", max_chars=2, key="minute_input")
        if minute.isdigit() and 0 <= int(minute) <= 59:
            st.session_state.big_trader_minute = int(minute)
            now_minute = datetime.datetime.now().minute
            da_troi = now_minute - int(minute) if now_minute >= int(minute) else (60 - int(minute)) + now_minute
            if da_troi >= 17:
                st.warning("‚õîÔ∏è H·∫øt gi·ªù giao d·ªãch, kh√¥ng ƒë∆∞·ª£c v√†o l·ªánh!")
                if st.button("Quay l·∫°i menu"):
                    st.session_state.state = "menu"
                    st.rerun()
            else:
                con_lai = 17 - da_troi
                st.success(f"‚úÖ H·ª£p l·ªá! C√≤n {con_lai} ph√∫t ƒë·ªÉ giao d·ªãch.")
                if st.button("Ti·∫øp t·ª•c"):
                    st.session_state.state = "step_3"
                    st.rerun()
    elif state == "step_2_below":
        minute = st.text_input("Nh·∫≠p s·ªë ph√∫t (0-59)", max_chars=2, key="minute_input_below")
        if minute.isdigit() and 0 <= int(minute) <= 59:
            st.session_state.big_trader_minute = int(minute)
            now_minute = datetime.datetime.now().minute
            da_troi = now_minute - int(minute) if now_minute >= int(minute) else (60 - int(minute)) + now_minute
            if da_troi >= 17:
                st.warning("‚õîÔ∏è H·∫øt gi·ªù giao d·ªãch, kh√¥ng ƒë∆∞·ª£c v√†o l·ªánh!")
                if st.button("Quay l·∫°i menu"):
                    st.session_state.state = "menu"
                    st.rerun()
            else:
                con_lai = 17 - da_troi
                st.success(f"‚úÖ H·ª£p l·ªá! C√≤n {con_lai} ph√∫t ƒë·ªÉ giao d·ªãch.")
                if st.button("Ti·∫øp t·ª•c"):
                    st.session_state.state = "step_3_below"
                    st.rerun()
    elif state in ["reason_win", "reason_lose", "reason_win_short", "reason_lose_short"]:
        result = "Th·∫Øng" if "win" in state else "Thua"
        trade_type = "Long" if "short" not in state else "Short"
        reason = st.text_input("Nh·∫≠p l√Ω do:", key="reason_input")
        if reason:
            if st.button("L∆∞u l·ªãch s·ª≠ l·ªánh"):
                save_history(trade_type, result, reason)
                st.success("ƒê√£ l∆∞u l·ªãch s·ª≠ l·ªánh!")
                st.session_state.state = "menu"
                st.rerun()

if __name__ == "__main__":
    main()



